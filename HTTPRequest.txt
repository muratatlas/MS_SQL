SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
ALTER procedure [dbo].[HTTPRequest]  
      @URI varchar(2000) = '',       
      @methodName varchar(50) = '',  
      @requestBody varchar(8000) = '',  
      @SoapAction varchar(255),  
      @UserName nvarchar(100) = '', -- Domain\UserName or UserName  
      @Password nvarchar(100) = '',  
      @responseText VarChar(Max) OutPut  
as  
begin  
 Set TextSize 2147483647  
   
  
 Set @UserName='1'  
 Set @Password='1'  
  

        
      --sp_OACreate - Creates an instance of an OLE object  
      --sp_OAMethod  - Calls a method of an OLE object.  
      --sp_OADestroy - Destroys a created OLE object  
      --sp_OASetProperty - Sets a property of an OLE object to a new value  
      --sp_OAGetProperty - Gets a property value of an OLE object.  
      --sp_OAStop - Stops the server-wide OLE Automation stored procedure execution environment  
  
      SET NOCOUNT ON  
        
      set @responseText='Failed.'  
        
      IF @methodName = ''  
      BEGIN  
            --select FailPoint = 'Method Name must be set'  
            --raiserror('Method Name must be set.',16,1)  
            set @responseText='Failed, method name must be set.'  
            return  
      END  
        
      DECLARE @objectID int  
      DECLARE @hResult int  
      DECLARE @source varchar(255), @desc varchar(255)  
        
      -- create ole object  
      --EXEC @hResult = sp_OACreate 'Microsoft.XMLHTTP', @objectID OUT  
      --EXEC @hResult = sp_OACreate 'MSXML.ServerXMLHTTP.2.0', @objectID OUT  
      --EXEC @hResult = sp_OACreate 'MSXML2.ServerXMLHTTP.3.0', @objectID OUT  
      --EXEC @hResult = sp_OACreate 'MSXML2.ServerXMLHTTP.4.0', @objectID OUT  
      --EXEC @hResult = sp_OACreate 'MSXML2.ServerXMLHTTP.6.0', @objectID OUT  
      --EXEC @hResult = sp_OACreate 'MSXML2.ServerXMLHTTP', @objectID OUT  
      EXEC @hResult = sp_OACreate 'WinHttp.WinHttpRequest.5.1', @objectID OUT  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'Create failed',  
            --    MedthodName = @methodName  
            exec sp_OADestroy @objectID  
            --raiserror('Create failed.',16,1)  
            set @responseText='Failed, create ole object.'  
            return  
      END  
        
      -- open the destination URI with Specified method  
      EXEC @hResult = sp_OAMethod @objectID, 'open', null, @methodName, @URI, 'false', @UserName, @Password  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'Open failed',  
            --    MedthodName = @methodName  
            exec sp_OADestroy @objectID  
            --raiserror('Open failed.',16,1)  
            set @responseText='Failed, open ole object.'  
            return  
      END  
        
     
        
      -- set request headers  
      EXEC @hResult = sp_OAMethod @objectID, 'setRequestHeader', null, 'Content-Type', 'text/xml;charset=UTF-8'  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'SetRequestHeader failed',  
            --    MedthodName = @methodName  
  
            exec sp_OADestroy @objectID  
            --raiserror('SetRequestHeader failed.',16,1)  
            set @responseText='Failed, ole object method setRequestHeader.'  
            return  
      END  
        
      -- set soap action  
      EXEC @hResult = sp_OAMethod @objectID, 'setRequestHeader', null, 'SOAPAction', @SoapAction  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'SetRequestHeader failed',  
            --    MedthodName = @methodName  
            exec sp_OADestroy @objectID  
            --raiserror('SetRequestHeader failed.',16,1)  
            set @responseText='Failed, ole object method setRequestHeader.'  
            return  
      END  
        
      declare @len int  
      set @len = len(@requestBody)  
        
      EXEC @hResult = sp_OAMethod @objectID, 'setRequestHeader', null, 'Content-Length', @len  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'SetRequestHeader failed',  
            --    MedthodName = @methodName  
            exec sp_OADestroy @objectID  
            --raiserror('SetRequestHeader failed.',16,1)  
            set @responseText='Failed, ole object method setRequestHeader.'  
            return  
      END  
        
      /*  
      -- if you have headers in a table called RequestHeader you can go through them with this  
      DECLARE @HeaderKey varchar(500), @HeaderValue varchar(500)  
      DECLARE RequestHeader CURSOR  
      LOCAL FAST_FORWARD  
      FOR  
              SELECT HeaderKey, HeaderValue  
              FROM RequestHeaders  
              WHERE Method = @methodName  
      OPEN RequestHeader  
      FETCH NEXT FROM RequestHeader  
      INTO @HeaderKey, @HeaderValue  
      WHILE @@FETCH_STATUS = 0  
      BEGIN  
              --select @HeaderKey, @HeaderValue, @methodName  
              EXEC @hResult = sp_OAMethod @objectID, 'setRequestHeader', null, @HeaderKey, @HeaderValue  
              IF @hResult <> 0  
              BEGIN  
                        EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
                        SELECT hResult = convert(varbinary(4), @hResult),  
                               source = @source,  
                       description = @desc,  
                               FailPoint = 'SetRequestHeader failed',  
                         MedthodName = @methodName  
                        goto destroy  
                        return  
              END  
              FETCH NEXT FROM RequestHeader  
              INTO @HeaderKey, @HeaderValue  
      END  
      CLOSE RequestHeader  
      DEALLOCATE RequestHeader  
      */  
        
  EXEC @hResult = sp_OAMethod @objectID, 'setProxy', NULL,  '2', '30.207.31.50', 1  
  IF @hResult <> 0  
  BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            exec sp_OADestroy @objectID  
            --raiserror('Send failed.',16,1)  
            set @responseText='Failed, ole object method SetProxy.'  
            return  
  End  
        
      -- send the request  
      EXEC @hResult = sp_OAMethod @objectID, 'send', null, @requestBody  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'Send failed',  
            --    MedthodName = @methodName  
   INSERT INTO [dbo].[webservicelog]  
           ([uri]  
           ,[methodname]  
           ,[requestbody]  
           ,[soapaction]  
           ,[username]  
           ,[password]  
           ,[responsetext]  
           ,[hresult]  
           ,[objectid]  
           ,[source]  
           ,[des_c])  
     select @URI,@methodName,@requestBody,@SoapAction,@UserName,@Password,@responseText,@hResult,@objectID,@source,@desc  
  
            exec sp_OADestroy @objectID  
            --raiserror('Send failed.',16,1)  
            set @responseText='Failed, ole object method send.'  
            return  
      END  
        
      declare @statusText varchar(1000), @status varchar(1000)  
      -- Get status text  
      exec sp_OAGetProperty @objectID, 'StatusText', @statusText out  
      exec sp_OAGetProperty @objectID, 'Status', @status out  
        
      create table #t(result ntext)   
      insert into #t  
      --Create Table #xml(xXml XML)  
      --Insert Into #xml(xXml)  
      --exec @hResult=sp_OAGetProperty @objectID, @responseText out--'responseText.xml'/*  
      exec @hResult=sp_OAGetProperty @objectID, 'responseText'--, @responseText out  
      IF @hResult <> 0  
      BEGIN  
            EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT  
            if ISNULL(@desc,'')<>''  
                  print @desc  
            --SELECT hResult = convert(varbinary(4), @hResult),  
            --    source = @source,  
            --    description = @desc,  
            --    FailPoint = 'ResponseText failed',  
            --    MedthodName = @methodName  
            exec sp_OADestroy @objectID  
            --raiserror('ResponseText failed.',16,1)  
            set @responseText='Failed, ole object property responseText.'  
            return  
      END  
  
  --Print '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'  
      SELECT @responseText=result FROM #t   
      --Print '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'  
                
      SET NOCOUNT OFF  
end  